generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin") // admin, barber, customer
  phone     String?
  avatar    String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  barbershop   Barbershop? @relation(fields: [barbershopId], references: [id])
  barbershopId String?

  appointments     Appointment[]
  servicesProvided Service[]

  @@map("users")
}

model Barbershop {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String
  address       String?
  city          String?
  state         String?
  logo          String?
  plan          String    @default("trial") // trial, basic, premium, enterprise
  planStatus    String    @default("active") // active, cancelled, suspended
  trialEndsAt   DateTime? // Data fim do trial
  planStartedAt DateTime  @default(now())
  planExpiresAt DateTime? // Data de renovação
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Limites do plano
  maxBarbers   Int @default(1)
  maxCustomers Int @default(100)

  users         User[]
  services      Service[]
  appointments  Appointment[]
  customers     Customer[]
  subscriptions Subscription[]

  @@map("barbershops")
}

model Subscription {
  id                 String    @id @default(uuid())
  barbershopId       String
  plan               String // basic, premium, enterprise
  status             String    @default("active") // active, cancelled, suspended, past_due
  amount             Decimal   @db.Decimal(10, 2)
  paymentMethod      String? // credit_card, pix, boleto
  externalId         String? // ID do gateway de pagamento
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelledAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  barbershop Barbershop @relation(fields: [barbershopId], references: [id])
  payments   Payment[]

  @@map("subscriptions")
}

model Payment {
  id             String    @id @default(uuid())
  subscriptionId String
  amount         Decimal   @db.Decimal(10, 2)
  status         String    @default("pending") // pending, paid, failed, refunded
  paymentMethod  String // credit_card, pix, boleto
  externalId     String? // ID do gateway
  paidAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  duration    Int // em minutos
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String

  barber   User?   @relation(fields: [barberId], references: [id])
  barberId String?

  appointments Appointment[]

  @@map("services")
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  email     String?
  phone     String
  birthDate DateTime?
  notes     String?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String

  appointments Appointment[]

  @@map("customers")
}

// ============================================
// MODELO CLIENT - COM SUPORTE OAUTH
// ============================================
model Client {
  id    String @id @default(uuid())
  name  String
  email String @unique

  // ✅ TORNAR PHONE E PASSWORD NULLABLE
  phone    String? // Agora aceita null
  password String? // Agora aceita null

  avatar    String?
  birthDate DateTime?
  active    Boolean   @default(true)

  googleId   String? @unique
  facebookId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]

  @@map("clients")
}

model Appointment {
  id        String   @id @default(uuid())
  date      DateTime
  status    String   @default("scheduled") // scheduled, confirmed, completed, cancelled
  notes     String?
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String

  // Relacionamento com Customer (clientes cadastrados pela barbearia)
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  // Relacionamento com Client (clientes do sistema público)
  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?

  barber   User   @relation(fields: [barberId], references: [id])
  barberId String

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String

  @@map("appointments")
}
